Import pandas as pd
Import matplotlib.pyplot as plt
Import numpy as np
From scipy.stats import skew
From scipy.stats import kurtosis
From scipy.stats import Shapiro
Import seaborn as sns
import statsmodels.formula.api as smf 
from scipy.stats import norm

#UNIVARIATE INVESTMENT RISK AND RETURNS

#Returns
StockPrices = pd.read_csv(fpath_csv, parse_dates=['Date'])
StockPrices = StockPrices.sort_values(by='Date')
print(StockPrices.head())

StockPrices['Returns'] = StockPrices['Adjusted'].pct_change()

StockPrices['Returns'].plot()
plt.show()

percent_return = StockPrices['Returns']*100
returns_plot = percent_return.dropna()

plt.hist(returns_plot, bins=75)
plt.show()


#Mean, Variance, and Normal Distribution
mean_return_daily = np.mean(StockPrices['Returns'])
print(mean_return_daily)

mean_return_annualized = ((1+mean_return_daily)**252)-1
print(mean_return_annualized)


sigma_daily = np.std(StockPrices['Returns'])
print(sigma_daily)

variance_daily = sigma_daily**2
print(variance_daily)

sigma_annualized = sigma_daily*np.sqrt(252)
print(sigma_annualized)

variance_annualized = sigma_annualized**2
print(variance_annualized)

#Skewness and Kurtosis, Shapiro-Wilk Test
clean_returns = StockPrices['Returns'].dropna()

returns_skewness = skew(clean_returns)
print(returns_skewness)

excess_kurtosis = kurtosis(clean_returns)
print(excess_kurtosis)
fourth_moment = excess_kurtosis + 3
print(fourth_moment)

shapiro_results = shapiro(clean_returns)
print("Shapiro results:", shapiro_results)

p_value = shapiro_results[1]
print("P-value: ", p_value)

#PORTFOLIO INVESTING

portfolio_weights = np.array([0.12, 0.15, 0.08, 0.05, 0.09, 0.10, 0.11, 0.14, 0.16])
WeightedReturns = StockReturns.mul(portfolio_weights, axis=1)
StockReturns['Portfolio'] = WeightedReturns.sum(axis=1)

CumulativeReturns = ((1+StockReturns["Portfolio"]).cumprod()-1)
CumulativeReturns.plot()
plt.show()

numstocks = 9
portfolio_weights_ew = np.repeat(1/numstocks, numstocks)

StockReturns['Portfolio_EW'] = StockReturns.iloc[:, 0:numstocks].mul(portfolio_weights_ew, axis=1).sum(axis=1)
cumulative_returns_plot(['Portfolio', 'Portfolio_EW'])

market_capitalizations = np.array([601.51, 469.25, 349.5, 310.48, 299.77, 356.94, 268.88, 331.57, 246.09])
mcap_weights = market_capitalizations / sum(market_capitalizations)

StockReturns['Portfolio_MCap'] = StockReturns.iloc[:, 0:9].mul(mcap_weights, axis=1).sum(axis=1)
cumulative_returns_plot(['Portfolio', 'Portfolio_EW', 'Portfolio_MCap'])

#Correlation and Covariance
correlation_matrix = StockReturns.corr()
print(correlation_matrix)

sns.heatmap(correlation_matrix,
            annot=True,
            cmap="YlGnBu", 
            linewidths=0.3,
            annot_kws={"size": 8})

plt.xticks(rotation=90)
plt.yticks(rotation=0) 
plt.show()




cov_mat = StockReturns.cov()
cov_mat_annual = cov_mat * 252
print(cov_mat_annual)

portfolio_volatility = np.sqrt(np.dot(portfolio_weights.T, np.dot(cov_mat_annual, portfolio_weights)))
print(portfolio_volatility)

#Markowitz Portfolios
risk_free = 0

RandomPortfolios['Sharpe'] = (RandomPortfolios['Returns'] - risk_free) / RandomPortfolios['Volatility']
print(RandomPortfolios['Sharpe'].describe()[['min', 'max']])

sorted_portfolios = RandomPortfolios.sort_values(by=['Sharpe'], ascending=False)

MSR_weights = sorted_portfolios.iloc[0, 0:numstocks]
MSR_weights_array = np.array(MSR_weights)

StockReturns['Portfolio_MSR'] = StockReturns.iloc[:, 0:numstocks].mul(MSR_weights_array, axis=1).sum(axis=1)

cumulative_returns_plot(['Portfolio_EW', 'Portfolio_MCap', 'Portfolio_MSR'])

sorted_portfolios = RandomPortfolios.sort_values(by=['Volatility'], ascending=True)

GMV_weights = sorted_portfolios.iloc[0, 0:numstocks]
GMV_weights_array = np.array(GMV_weights)

StockReturns['Portfolio_GMV'] = StockReturns.iloc[:, 0:numstocks].mul(GMV_weights_array, axis=1).sum(axis=1)

cumulative_returns_plot(['Portfolio_EW', 'Portfolio_MCap', 'Portfolio_MSR', 'Portfolio_GMV'])

#FACTOR INVESTING
#CAPM
FamaFrenchData = pd.read_csv(‘FamaFrenchFactors.csv’)

FamaFrenchData['Portfolio_Excess'] = FamaFrenchData['Portfolio'] - FamaFrenchData['RF']

CumulativeReturns = ((1+FamaFrenchData[['Portfolio','Portfolio_Excess']]).cumprod()-1)
CumulativeReturns.plot()
plt.show()

covariance_matrix = FamaFrenchData[['Portfolio_Excess', 'Market_Excess']].cov()

covariance_coefficient = covariance_matrix.iloc[0, 1]
print(covariance_coefficient)

benchmark_variance = FamaFrenchData['Market_Excess'].var()
print(benchmark_variance)


portfolio_beta = covariance_coefficient / benchmark_variance
print(portfolio_beta)

CAPM_model = smf.ols(formula='Portfolio_Excess ~ Market_Excess', data=FamaFrenchData)

CAPM_fit = CAPM_model.fit()
print(CAPM_fit.rsquared_adj)

regression_beta = CAPM_fit.params['Market_Excess']
print(regression_beta)

#Alpha and Multi-Factor Models
FamaFrench_model = smf.ols(formula='Portfolio_Excess ~ Market_Excess + SMB + HML', data=FamaFrenchData)

FamaFrench_fit = FamaFrench_model.fit()
regression_adj_rsq = FamaFrench_fit.rsquared_adj
print(regression_adj_rsq)

smb_pval = FamaFrench_fit.pvalues['SMB']

if smb_pval < 0.05:
    significant_msg = 'significant'
else:
    significant_msg = 'not significant'

smb_coeff = FamaFrench_fit.params['SMB']
print("The SMB coefficient is ", smb_coeff, " and is ", significant_msg)

portfolio_alpha = FamaFrench_fit.params['Intercept']
print(portfolio_alpha)

portfolio_alpha_annualized = ((1 + portfolio_alpha) ** 252) - 1
print(portfolio_alpha_annualized)

#Expanding the 3-Factor Model
FamaFrench5_model = smf.ols(formula='Portfolio_Excess ~ Market_Excess + SMB + HML + RMW + CMA', data=FamaFrenchData)

FamaFrench5_fit = FamaFrench5_model.fit()

regression_adj_rsq = FamaFrench5_fit.rsquared_adj
print(regression_adj_rsq)








#VALUE AT RISK
#Drawdowns and Estimating Tail Risk
Cum_rets = pd.read_csv(‘USO.csv’)

running_max = np.maximum.accumulate(cum_rets)

running_max[running_max < 1] = 1

drawdown = (cum_rets) / running_max - 1

drawdown.plot()
plt.show()

StockReturns_perc = cum_rets[‘USO’].pct_change()

var_95 = np.percentile(StockReturns_perc, 5)
print(var_95)

sorted_rets = np.sort(StockReturns_perc)

plt.hist(sorted_rets, density=True, stacked=True)

plt.axvline(x=var_95, color='r', linestyle='-', label="VaR 95: {0:.2f}%".format(var_95))
plt.show()

cvar_95 = StockReturns_perc[StockReturns_perc <= var_95].mean()
print(cvar_95)

sorted_rets = sorted(StockReturns_perc)

plt.hist(sorted_rets, density=True, stacked=True)

plt.axvline(x=var_95, color="r", linestyle="-", label='VaR 95: {0:.2f}%'.format(var_95))
plt.axvline(x=cvar_95, color='b', linestyle='-', label='CVaR 95: {0:.2f}%'.format(cvar_95))
plt.show()

#VaR Extensions and Scaling Risk
var_90 = np.percentile(StockReturns_perc, 10)
print(var_90)

cvar_90 = StockReturns_perc[StockReturns_perc <= var_90].mean()
print(cvar_90)

mu = np.mean(StockReturns)
vol = np.std(StockReturns)
confidence_level = 0.05

var_95 = norm.ppf(confidence_level, mu, vol)
print('Mean: ', str(mu), '\nVolatility: ', str(vol), '\nVaR(95): ', str(var_95))


forecasted_values = np.empty([100, 2])

for i in range(100):
    # Save the time horizon i
    forecasted_values[i, 0] = i
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = var_95 * np.sqrt(i + 1)

print(forecasted_values.head())

#Random Walks and Monte Carlo Simulation
mu = np.mean(StockReturns)
vol = np.std(StockReturns)
T = 252
S0 = 10

rand_rets = np.random.normal(mu, vol, T) + 1

forecasted_values = rand_rets.cumprod() * S0

plt.plot(range(0, T), forecasted_values)
plt.show()

for i in range(100):

    rand_rets = np.random.normal(mu, vol, T) + 1
    
    forecasted_values = S0*(rand_rets).cumprod()
    
    plt.plot(range(T), forecasted_values)

plt.show()

#Monte Carlo VaR
sim_returns = []

for i in range(100):

    rand_rets = np.random.normal(mu, vol, T)
    
    sim_returns.append(rand_rets)

var_99 = np.percentile(sim_returns, 1)
print("Parametric VaR(99): ", round(100*var_99, 2),"%")
